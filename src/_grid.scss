@mixin grid-debug($setting: false) {
  @if ($setting != false) {
    :root {
      --grid-debug: 1px solid var(--grid-color, red);
   }
 } 
}

@mixin grid-max-width($value) {
  :root {
    --grid-extra-padding: 0px;
    --grid-max-width: 100%;
    --grid-gap-correction: 1;
  } 
  @media (min-width: #{$value}) {
    :root {
      --grid-max-width: #{$value};
      --grid-extra-padding: calc( var(--grid-padding) * 2); 
      --grid-gap-correction: .5;
    }
  }
}

/* 
* @params
* $columns: how much columns in the grid will it use
* $offset: How the number of columns offset
* $extra: if the column is not the first in the grid, gif it an extra gutter offset from left
*/
@mixin grid($columns:null, $offset:0, $extra-gutter:false, $in-custom-grid: var(--grid-count)) {
  @if ($columns == null) { @error "You must at least set one param to the grid mixin"; }
  $guttercalculator: calc(1 - #{$columns} / #{$in-custom-grid});
  $offsetcalculator: calc(1 - #{$offset} / #{$in-custom-grid});
  
  @if ($extra-gutter != false) { 
    $extra-gutter: calc( var(--grid-gap) * var(--grid-gap-correction)); // on max-width
  }
  @else {
    $extra-gutter: 0px;
  }
  outline: var(--grid-debug, none); 
  margin-left: calc( ( var(--grid-max-width) / #{$in-custom-grid}  * #{$offset} - (var(--grid-gap) * #{$offsetcalculator} )) + var(--grid-gap) + #{$extra-gutter});
  flex-basis:  calc( ( var(--grid-max-width) - var(--grid-extra-padding) ) / #{$in-custom-grid}  * #{$columns} - (var(--grid-gap) * #{$guttercalculator} ) );
  width:       calc( ( var(--grid-max-width) - var(--grid-extra-padding) ) / #{$in-custom-grid}  * #{$columns} - (var(--grid-gap) * #{$guttercalculator} ) );
}
